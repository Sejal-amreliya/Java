static int maxSubarrayProduct(int arr[])
    {        int result = arr[0];
        int n = arr.length;
        for (int i = 0; i < n; i++)
        {
            int mul = arr[i];
            for (int j = i + 1; j < n; j++)
            {
                result = Math.max(result, mul);
                mul *= arr[j];
            }
            result = Math.max(result, mul);
        }
        return result;
    }
     public static void main(String[] args)
    {
        int arr[] = { 1, -2, -3, 0, 7, -8, -2 };
        System.out.println("Maximum Sub array product is "+ maxSubarrayProduct(arr));


TIME COMPLEXITY == O(N^2)     Space COMPLEXITY == O(1)
class Solution {
    public int maxProduct(int[] nums) {
     int max=nums[0];
     int min=nums[0];
     int r=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]<0)
	    {
                int t=min;
                min=max;
                max=t;
	    }	
            max=Math.max(max*nums[i],nums[i]);
            min=Math.min(min*nums[i],nums[i]);
            r=Math.max(r,max);
        }
         return r;
    }
           
}

TIME COMPLEXITY == O(N)
Space COMPLEXITY == O(1)