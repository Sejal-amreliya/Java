 public static int maxArea_bf(int[] height) {
        int len = heigth.length;
        int max = 0;
        for (int i = 0; i < len - 1; i++) {
            for (int j = i + 1; j < len; j++) {
                int area = Math.min(height[i], height[j]) * (j - i);
                max = Math.max(max, area);
            }
        }

        return max;
    }
TIME COMPLEXITY==O(N^2)
SPACE COMPLEXITY==O(1)

======================================================================================================================================================================


 public static int maxArea_tp(int[] height) {
        int len = height.length;
        int left = 0;
        int right = len - 1;
        int max = Math.min(height[left], height[right]) * (right - left);
        while (left < right) {
            // Move the shorter lines each time
            if (height[left] <= height[right]) {
                left++;
            } else {
                right--;
            }

            // update the max area
            max = Math.max(max, Math.min(height[left], height[right]) * (right - left));
        }

        return max;
    }


TIME COMPLEXITY==O(N)
SPACE COMPLEXITY==O(1)