Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int pro=1;
        int[] ans=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            pro *= nums[i];
        }
        for(int i=0;i<nums.length;i++)
        {
            ans[i] = pro/nums[i];
        }
        return ans;
    }
}




========================================================================================================================================
class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        // Step 1: Maximum product on left side of 1st element
        int lmax = 1;
        
        // Step 2: Maximum product on right side of last element
        int rmax = 1;
        
        // Step 3: Store result
        int[] result = new int[nums.length];
        
        // Step 4: For each element, find max product on it's left side and update the lmax
        for(int i=0;i<nums.length;i++){
            result[i] = lmax;
            lmax *= nums[i];
        }
        
        // Step 5: For each element, find max product on it's right side and update the rmax
        for(int i=nums.length-1; i>=0; i--){
            
            // Step 6: We need product, so multiply lmax stored in result with rmax
            result[i] *= rmax;
            rmax *= nums[i];
            
        }
        
        return result;
        
    }
}